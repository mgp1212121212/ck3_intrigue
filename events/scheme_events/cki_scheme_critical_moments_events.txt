namespace = cki_scheme_critical_moments
##############MOD

# End of Scheme -- Redirects to relevent result event for scheme
cki_scheme_critical_moments.0002 = {
	type = character_event
	window = scheme_preparations_event
	title = {
		desc = cki_scheme_critical_moments.0002.t.scheme
	}
	desc = cki_scheme_critical_moments.0002.desc
	theme = intrigue
	left_portrait = {
		character = scope:owner
		scripted_animation = scheme_prep_pick_best_stance
	}
	right_portrait = {
		character = scope:target
		scripted_animation = scheme_prep_pick_best_stance
	}
	# Background overrides.
	## Tabbed one degree further for easy folding.
		## Raid Estate Scheme.
		override_background = {
			trigger = {
				scope:scheme = { scheme_type = raid_estate }
			}
			reference = ep3_mediterranean_estate
		}
		## Romantic schemes.
		override_background = {
			trigger = {
				scope:scheme = { should_use_amorous_scheme_animation_trigger = yes }
			}
			reference = bedchamber
		}
		## Diplo schemes.
		override_background = {
			trigger = {
				scope:scheme = { scheme_skill = diplomacy }
			}
			reference = council_chamber
		}
		## Martial or prowess schemes.
		override_background = {
			trigger = {
				scope:scheme = {
					scheme_skill = martial
					scheme_skill = prowess
				}
			}
			reference = armory
		}
		## Stewardship schemes.
		override_background = {
			trigger = {
				scope:scheme = { scheme_skill = stewardship }
			}
			reference = study
		}
		## Intrigue schemes.
		override_background = {
			trigger = {
				scope:scheme = { scheme_skill = intrigue }
			}
			reference = corridor_night
		}
		## Learning schemes.
		override_background = {
			trigger = {
				scope:scheme = { scheme_skill = learning }
			}
			reference = physicians_study
		}
	# Icon overrides.
	## Tabbed one degree further for easy folding.
		## Diplo schemes.
		override_icon = {
			trigger = {
				scope:scheme = { scheme_skill = diplomacy }
			}
			reference = "gfx/interface/icons/event_types/type_diplomacy.dds"
		}
		## Martial or prowess schemes.
		override_icon = {
			trigger = {
				scope:scheme = {
					scheme_skill = martial
					scheme_skill = prowess
				}
			}
			reference = "gfx/interface/icons/event_types/type_martial.dds"
		}
		## Stewardship schemes.
		override_icon = {
			trigger = {
				scope:scheme = { scheme_skill = stewardship }
			}
			reference = "gfx/interface/icons/event_types/type_stewardship.dds"
		}
		## Intrigue schemes.
		override_icon = {
			trigger = {
				scope:scheme = { scheme_skill = intrigue }
			}
			reference = "gfx/interface/icons/event_types/type_intrigue.dds"
		}
		## Learning schemes.
		override_icon = {
			trigger = {
				scope:scheme = { scheme_skill = learning }
			}
			reference = "gfx/interface/icons/event_types/type_learning.dds"
		}

	# Scheme Preparations status bar
	widget = {
		gui = "event_window_widget_scheme_preparations"
		container = "custom_widgets_container"
	}

	trigger = {
		NOR = {
			has_character_flag = currently_in_scheme_preparations
			has_character_flag = currently_in_scheme_reminder
		}
	}

	immediate = {
		# Flag that we're in the event, so no doubles pls.
		add_character_flag = currently_in_scheme_preparations
		# Sort some aesthetic stuff for the player.
		#scheme_critical_moments_0001_configure_portraits_effect = yes
	}

	# Standard completion: no buffs.
	option = {
		name = cki_scheme_critical_moments.0002.a
		show_as_unavailable = { always = yes }
		trigger = {
			custom_tooltip = {
				text = cki_scheme_critical_moments.0002.a.tt.stymied.insufficient_opportunities
				scope:scheme = { scheme_agent_charges >= multi_ending_scheme_charge_to_advance_threshold_t1_value }
			}
			# Tell the AI not to bother unless their chance are at least 50:50.
			trigger_if = {
				limit = {
					is_ai = yes
					# Make sure the AI can get out of long schemes eventually.
					scope:scheme.scheme_duration_days < 3650
				}
				scope:scheme = {
					# Must have a good shot.
					scheme_success_chance >= 50
					# Only consider the best possible option.
					scheme_agent_charges < multi_ending_scheme_charge_to_advance_threshold_t2_value
				}
			}
		}

		# Scheme gon' try to conclude.
		custom_tooltip = cki_scheme_critical_moments.0002.a.tt.progress
		#scheme_critical_moments_0001_execute_scheme_default_flow_effect = { COST = multi_ending_scheme_charge_to_advance_threshold_t1_value }
		if = {
			limit = {scope:owner.var:scheme_type = 1}
			trigger_event = { id = cki_scheme_critical_moments.1000 }
		}
		else_if = {
			limit = {scope:owner.var:scheme_type = 2}
			trigger_event = { id = cki_scheme_critical_moments.1010 }
		}
		else_if = {
			limit = {scope:owner.var:scheme_type = 3}
			trigger_event = { id = cki_scheme_critical_moments.1020 }
		}
		else_if = {
			limit = {scope:owner.var:scheme_type = 4}
			trigger_event = { id = cki_scheme_critical_moments.1030 }
		}
		else_if = {
			limit = {scope:owner.var:scheme_type = 5}
			trigger_event = { id = cki_scheme_critical_moments.1070 }
		}
		else_if = {
			limit = {scope:owner.var:scheme_type = 6}
			trigger_event = { id = cki_scheme_critical_moments.1080 }
		}
		
		#trigger_event = { id = cki_scheme_critical_moments.1000 } # used when the saved id wouldnt fire
		#trigger_event = { saved_event_id = scope:owner.var:follow_up_event } # original pdx fire event by saving it in prep
		ai_chance = { scheme_prep_ai_should_execute_scheme_modifier = yes }
		scope:scheme = {
			change_opportunities = -5
		}
	}

	# Pricier completion: minor success chance gains.
	option = {
		name = cki_scheme_critical_moments.0002.b
		show_as_unavailable = { always = yes }
		trigger = {
			custom_tooltip = {
				text = cki_scheme_critical_moments.0002.b.tt.stymied.insufficient_opportunities
				scope:scheme = { scheme_agent_charges >= multi_ending_scheme_charge_to_advance_threshold_t2_value }
			}
			# Tell the AI not to bother unless their chance are at least 50:50.
			trigger_if = {
				limit = {
					is_ai = yes
					# Make sure the AI can get out of long schemes eventually.
					scope:scheme.scheme_duration_days < 3650
				}
				scope:scheme = {
					# Must have a good shot.
					scheme_success_chance >= 50
					# Only consider the best possible option.
					scheme_agent_charges < multi_ending_scheme_charge_to_advance_threshold_t3_value
				}
			}
		}

		# Scheme gon' try to conclude.
		custom_tooltip = cki_scheme_critical_moments.0002.b.tt.progress
		scope:scheme = {
			custom_tooltip = {
				text = cki_scheme_critical_moments.0002.b.tt.clarify_buff
				add_scheme_modifier = { type = scheme_end_buff_t2_modifier }
			}
		}
		#scheme_cki_critical_moments_0001_execute_scheme_default_flow_effect = { COST = multi_ending_scheme_charge_to_advance_threshold_t2_value }
		if = {
			limit = {scope:owner.var:scheme_type = 1}
			trigger_event = { id = cki_scheme_critical_moments.1000 }
		}
		else_if = {
			limit = {scope:owner.var:scheme_type = 2}
			trigger_event = { id = cki_scheme_critical_moments.1010 }
		}
		else_if = {
			limit = {scope:owner.var:scheme_type = 3}
			trigger_event = { id = cki_scheme_critical_moments.1020 }
		}
		else_if = {
			limit = {scope:owner.var:scheme_type = 4}
			trigger_event = { id = cki_scheme_critical_moments.1030 }
		}
		else_if = {
			limit = {scope:owner.var:scheme_type = 5}
			trigger_event = { id = cki_scheme_critical_moments.1070 }
		}
		else_if = {
			limit = {scope:owner.var:scheme_type = 6}
			trigger_event = { id = cki_scheme_critical_moments.1080 }
		}
		#trigger_event = { id = cki_scheme_critical_moments.1000 }
		#trigger_event = { saved_event_id = scope:follow_up_event }
		ai_chance = { scheme_prep_ai_should_execute_scheme_modifier = yes }
		scope:scheme = {
			change_opportunities = -10
		}
	}

	# Very pricey completion: moderate success chance gains.
	option = {
		name = cki_scheme_critical_moments.0002.c
		show_as_unavailable = { always = yes }
		trigger = {
			custom_tooltip = {
				text = cki_scheme_critical_moments.0002.c.tt.stymied.insufficient_opportunities
				scope:scheme = { scheme_agent_charges >= multi_ending_scheme_charge_to_advance_threshold_t3_value }
			}
			# Tell the AI not to bother unless their chance are at least 50:50.
			trigger_if = {
				limit = {
					is_ai = yes
					# Make sure the AI can get out of long schemes eventually.
					scope:scheme.scheme_duration_days < 3650
				}
				scope:scheme = {
					# Must have a good shot.
					scheme_success_chance >= 50
					# Only consider the best possible option.
					scheme_agent_charges < multi_ending_scheme_charge_to_advance_threshold_t4_value
				}
			}
		}

		# Scheme gon' try to conclude.
		custom_tooltip = cki_scheme_critical_moments.0002.c.tt.progress
		scope:scheme = {
			custom_tooltip = {
				text = cki_scheme_critical_moments.0002.c.tt.clarify_buff
				add_scheme_modifier = { type = scheme_end_buff_t3_modifier }
			}
		}
		#scheme_cki_critical_moments_0001_execute_scheme_default_flow_effect = { COST = multi_ending_scheme_charge_to_advance_threshold_t3_value }
		if = {
			limit = {scope:owner.var:scheme_type = 1}
			trigger_event = { id = cki_scheme_critical_moments.1000 }
		}
		else_if = {
			limit = {scope:owner.var:scheme_type = 2}
			trigger_event = { id = cki_scheme_critical_moments.1010 }
		}
		else_if = {
			limit = {scope:owner.var:scheme_type = 3}
			trigger_event = { id = cki_scheme_critical_moments.1020 }
		}
		else_if = {
			limit = {scope:owner.var:scheme_type = 4}
			trigger_event = { id = cki_scheme_critical_moments.1030 }
		}
		else_if = {
			limit = {scope:owner.var:scheme_type = 5}
			trigger_event = { id = cki_scheme_critical_moments.1070 }
		}
		else_if = {
			limit = {scope:owner.var:scheme_type = 6}
			trigger_event = { id = cki_scheme_critical_moments.1080 }
		}
		#trigger_event = { id = cki_scheme_critical_moments.1000 }
		#trigger_event = { saved_event_id = scope:follow_up_event }
		ai_chance = { scheme_prep_ai_should_execute_scheme_modifier = yes }
		scope:scheme = {
			change_opportunities = -15
		}
	}

	# Max pricey completion: excellent success chance gains.
	option = {
		name = cki_scheme_critical_moments.0002.d
		show_as_unavailable = { always = yes }
		trigger = {
			custom_tooltip = {
				text = cki_scheme_critical_moments.0002.d.tt.stymied.insufficient_opportunities
				scope:scheme = { scheme_agent_charges >= multi_ending_scheme_charge_to_advance_threshold_t4_value }
			}
			# Tell the AI not to bother unless their chance are at least 50:50.
			trigger_if = {
				limit = {
					is_ai = yes
					# Make sure the AI can get out of long schemes eventually.
					scope:scheme.scheme_duration_days < 3650
				}
				scope:scheme = {
					OR = {
						scheme_success_chance >= 50
						AND = {
							scheme_success_chance >= max_scheme_success_chance
							scheme_agent_charges >= multi_ending_scheme_charge_to_advance_threshold_t4_value
						}
					}
				}
			}
		}

		# Scheme gon' try to conclude.
		custom_tooltip = cki_scheme_critical_moments.0002.d.tt.progress
		scope:scheme = {
			custom_tooltip = {
				text = cki_scheme_critical_moments.0002.d.tt.clarify_buff
				add_scheme_modifier = { type = scheme_end_buff_t4_modifier }
			}
		}
		#scheme_cki_critical_moments_0001_execute_scheme_default_flow_effect = { COST = multi_ending_scheme_charge_to_advance_threshold_t4_value }
		if = {
			limit = {scope:owner.var:scheme_type = 1}
			trigger_event = { id = cki_scheme_critical_moments.1000 }
		}
		else_if = {
			limit = {scope:owner.var:scheme_type = 2}
			trigger_event = { id = cki_scheme_critical_moments.1010 }
		}
		else_if = {
			limit = {scope:owner.var:scheme_type = 3}
			trigger_event = { id = cki_scheme_critical_moments.1020 }
		}
		else_if = {
			limit = {scope:owner.var:scheme_type = 4}
			trigger_event = { id = cki_scheme_critical_moments.1030 }
		}
		else_if = {
			limit = {scope:owner.var:scheme_type = 5}
			trigger_event = { id = cki_scheme_critical_moments.1070 }
		}
		else_if = {
			limit = {scope:owner.var:scheme_type = 6}
			trigger_event = { id = cki_scheme_critical_moments.1080 }
		}
		#trigger_event = { id = cki_scheme_critical_moments.1000 }
		#trigger_event = { saved_event_id = scope:follow_up_event }
		ai_chance = { scheme_prep_ai_should_execute_scheme_modifier = yes }
		scope:scheme = {
			change_opportunities = -20
		}
	}

	# Come back later.
	option = {
		name = cki_scheme_critical_moments.0002.e

		if = {
			limit = {
				scope:scheme = { scheme_agent_charges >= 1 }
			}
			custom_tooltip = cki_scheme_critical_moments.0002.e.tt.some_opportunities
		}
		else = { custom_tooltip = cki_scheme_critical_moments.0002.e.tt.zero_opportunities }

		ai_chance = {
			first_valid = {
				modifier = {
					add = -100
					scope:scheme.scheme_success_chance >= scope:scheme.max_scheme_success_chance
				}
				modifier = {
					add = 50
					always = yes
				}
			}
			# If this scheme has been going on for a long time, execute it regardless.
			first_valid = {
				modifier = {
					factor = 0
					scope:scheme = {
						is_scheme_category = contract
						scheme_duration_days >= 1825
					}
				}
				modifier = {
					factor = 0
					has_trait = impatient
					scope:scheme.scheme_duration_days >= 1825
				}
				modifier = {
					factor = 0
					has_trait = patient
					scope:scheme.scheme_duration_days >= 5475
				}
				modifier = {
					factor = 0
					scope:scheme.scheme_duration_days >= 3650
				}
			}
		}
	}

	after = {
		remove_character_flag = currently_in_scheme_preparations
		scope:scheme = { remove_variable = target_intercept_repeatable_chance }
	}
}

# Trait XP Drain 
cki_scheme_critical_moments.0003 = {
	 hidden = yes
	 immediate = {
		if = {
			limit = {
				AND = {
					has_trait = cki_track
					has_trait_xp = {
						trait = cki_track
						track = cki_negative
						value > 0
					}
				}
			}
			remove_cki_trait_negative_xp_effect = yes
		}
	}
} 

#######################################################
### Results event for the Theft scheme.
#######################################################
# Determine outcome
cki_scheme_critical_moments.1000 = {
	hidden = yes

	immediate = {
		scope:scheme = {
			random = {
				chance = scope:scheme.scheme_secrecy
				save_scope_value_as = {
					name = scheme_secret
					value = yes
				}
			}
			random = {
				chance = scope:scheme.scheme_success_chance

				save_scope_value_as = {
					name = scheme_successful
					value = yes
				}
			}
			scope:owner = {			
				if = {
					limit = {
						exists = scope:scheme_successful
					}
					if = {
						limit = {
							exists = scope:scheme_secret
						}
							trigger_event = {
								id = cki_scheme_critical_moments.1001
							}
						}
						else = {
							trigger_event = {
								id = cki_scheme_critical_moments.1002
							}
						}
					}
				else = {
					if = {
						limit = {
							exists = scope:scheme_secret
						}
							trigger_event = {
								id = cki_scheme_critical_moments.1003
							}
						}
						else = {
							trigger_event = {
								id = cki_scheme_critical_moments.1004
							}
						}	
				}
			}
		}
	}
}
# Total Success
cki_scheme_critical_moments.1001 = {
	type = character_event
	window = scheme_successful_event
	title = cki_scheme_critical_moments.1001.t
	desc = cki_scheme_critical_moments.1001.desc
	theme = generic_intrigue_scheme
	left_portrait = {
		character = scope:owner
		animation = happiness
	}
	lower_right_portrait = scope:target

	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}
	
	immediate = {
		root = { 
			send_interface_message = {
				type = event_intrigue_good
				title = theft_success_message
				left_icon = root
				right_icon = scope:target
			}
		}
	}

	option = {
		name = cki_scheme_critical_moments.1001.a
		theft_success_effect = yes

		scope:scheme = {
			end_scheme = yes
		}

		scope:target = {
			trigger_event = cki_scheme_critical_moments.1005 
		}
	}
}

# Partial Success
cki_scheme_critical_moments.1002 = {
	type = character_event
	window = scheme_successful_event
	title = cki_scheme_critical_moments.1002.t
	desc = cki_scheme_critical_moments.1002.desc
	theme = generic_intrigue_scheme
	left_portrait = {
		character = scope:owner
		animation = happiness
	}
	lower_right_portrait = scope:target

	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}
	
	immediate = {
		root = { 
			send_interface_message = {
				type = event_intrigue_good
				title = theft_success_message
				left_icon = root
				right_icon = scope:target
			}
		}
	}

	option = {
		name = cki_scheme_critical_moments.1002.a
		theft_partial_success_effect = yes

		scope:scheme = {
			end_scheme = yes
		}

		scope:target = {
			trigger_event = cki_scheme_critical_moments.1006 
		}
	}
}

# Partial Failure
cki_scheme_critical_moments.1003 = {
	type = character_event
	window = scheme_failed_event
	title = cki_scheme_critical_moments.1003.t
	desc = cki_scheme_critical_moments.1003
	theme = generic_intrigue_scheme

	left_portrait = {
		character = scope:owner
		animation = dismissal
	}
	lower_right_portrait = scope:target

	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}

	trigger = {
		NOT = {
			has_character_flag = had_cki_scheme_critical_moments_1003
		}
	}

	immediate = {
		add_character_flag = {
			flag = had_cki_scheme_critical_moments_1003
			years = 5
		}
	}

	option = {
		name = cki_scheme_critical_moments.1003.a

		theft_partial_failure_effect = yes
		scope:scheme = {
			end_scheme = yes
		 }
	}
}

# Total Failure
cki_scheme_critical_moments.1004 = {
	type = character_event
	window = scheme_failed_event
	title = cki_scheme_critical_moments.1004.t
	desc = cki_scheme_critical_moments.1004
	theme = generic_intrigue_scheme

	left_portrait = {
		character = scope:owner
		animation = dismissal
	}
	lower_right_portrait = scope:target

	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}

	trigger = {
		NOT = {
			has_character_flag = had_cki_scheme_critical_moments_1004
		}
	}

	immediate = {
		add_character_flag = {
			flag = had_cki_scheme_critical_moments_1004
			years = 5
		}
		scope:target = {
			trigger_event = cki_scheme_critical_moments.1007 
		}
	}

	option = {
		name = cki_scheme_critical_moments.1004.a

		theft_failure_effect = yes
		scope:scheme = {
			end_scheme = yes
		 }
	}
}

# Successful Notification to scheme target
cki_scheme_critical_moments.1005 = {
	type = character_event
	window = scheme_target_event
	title = cki_scheme_critical_moments.1005.t
	desc = cki_scheme_critical_moments.1005.desc
	theme = generic_intrigue_scheme

	option = {
		name = cki_scheme_critical_moments.1005.a
		scope:target = {
			if = {limit = {has_trait=greedy}
				add_stress = major_stress_impact_gain
			}
			else_if = {limit = {has_trait=generous}
				add_stress = minor_stress_impact_loss
			}
			
		}
	}
}

# Successful Not Secret Notification to scheme target
cki_scheme_critical_moments.1006 = {
	type = character_event
	window = scheme_target_event
	title = cki_scheme_critical_moments.1006.t
	desc = cki_scheme_critical_moments.1006.desc
	theme = generic_intrigue_scheme
	left_portrait = scope:owner

	option = {
		name = cki_scheme_critical_moments.1006.a
		scope:target = {
			if = {limit = {has_trait=greedy}
				add_stress = major_stress_impact_gain
			}
			else_if = {limit = {has_trait=generous}
				add_stress = minor_stress_impact_loss
			}
			
		}
	}
}

# Failed Not Secret Notification to scheme target
cki_scheme_critical_moments.1007 = {
	type = character_event
	window = scheme_target_event
	title = cki_scheme_critical_moments.1007.t
	desc = cki_scheme_critical_moments.1007.desc
	theme = generic_intrigue_scheme
	left_portrait = scope:owner

	option = {
		name = cki_scheme_critical_moments.1007.a
		scope:target = {
			if = {limit = {has_trait=greedy}
				add_stress = minor_stress_impact_gain
			}
			else = {}
			
		}
	}
}



#######################################################
### Results event for the Tarnish Reputation scheme.
#######################################################
# Determine outcome
cki_scheme_critical_moments.1010 = {
	hidden = yes

	immediate = {
		scope:scheme = {
			random = {
				chance = scope:scheme.scheme_secrecy
				save_scope_value_as = {
					name = scheme_secret
					value = yes
				}
			}
			random = {
				chance = scope:scheme.scheme_success_chance

				save_scope_value_as = {
					name = scheme_successful
					value = yes
				}
			}
			scope:owner = {			
				if = {
					limit = {
						exists = scope:scheme_successful
					}
					if = {
						limit = {
							exists = scope:scheme_secret
						}
							trigger_event = {
								id = cki_scheme_critical_moments.1011
							}
						}
						else = {
							trigger_event = {
								id = cki_scheme_critical_moments.1012
							}
						}
					}
				else = {
					if = {
						limit = {
							exists = scope:scheme_secret
						}
							trigger_event = {
								id = cki_scheme_critical_moments.1013
							}
						}
						else = {
							trigger_event = {
								id = cki_scheme_critical_moments.1014
							}
						}	
				}
			}
		}
	}
}
# Total Success
cki_scheme_critical_moments.1011 = {
	type = character_event
	window = scheme_successful_event
	title = cki_scheme_critical_moments.1011.t
	desc = cki_scheme_critical_moments.1011.desc
	theme = generic_intrigue_scheme
	left_portrait = {
		character = scope:owner
		animation = happiness
	}
	lower_right_portrait = scope:target

	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}
	
	immediate = {
		root = { 
			send_interface_message = {
				type = event_intrigue_good
				title = tarnish_rep_success_message
				left_icon = root
				right_icon = scope:target
			}
		}
	}

	option = {
		name = cki_scheme_critical_moments.1011.a
		tarnish_rep_success_effect = yes

		scope:scheme = {
			end_scheme = yes
		}

		scope:target = {
			trigger_event = cki_scheme_critical_moments.1015 
		}
	}
}

# Partial Success
cki_scheme_critical_moments.1012 = {
	type = character_event
	window = scheme_successful_event
	title = cki_scheme_critical_moments.1012.t
	desc = cki_scheme_critical_moments.1012.desc
	theme = generic_intrigue_scheme
	left_portrait = {
		character = scope:owner
		animation = happiness
	}
	lower_right_portrait = scope:target

	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}
	
	immediate = {
		root = { 
			send_interface_message = {
				type = event_intrigue_good
				title = tarnish_rep_success_message
				left_icon = root
				right_icon = scope:target
			}
		}
	}

	option = {
		name = cki_scheme_critical_moments.1012.a
		tarnish_rep_partial_success_effect = yes

		scope:scheme = {
			end_scheme = yes
		}

		scope:target = {
			trigger_event = cki_scheme_critical_moments.1016 
		}
	}
}

# Partial Failure
cki_scheme_critical_moments.1013 = {
	type = character_event
	window = scheme_failed_event
	title = cki_scheme_critical_moments.1013.t
	desc = cki_scheme_critical_moments.1013
	theme = generic_intrigue_scheme

	left_portrait = {
		character = scope:owner
		animation = dismissal
	}
	lower_right_portrait = scope:target

	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}

	trigger = {
		NOT = {
			has_character_flag = had_cki_scheme_critical_moments_1013
		}
	}

	immediate = {
		add_character_flag = {
			flag = had_cki_scheme_critical_moments_1013
			years = 5
		}
	}

	option = {
		name = cki_scheme_critical_moments.1013.a

		tarnish_rep_partial_failure_effect = yes
		scope:scheme = {
			end_scheme = yes
		 }
	}
}

# Total Failure
cki_scheme_critical_moments.1014 = {
	type = character_event
	window = scheme_failed_event
	title = cki_scheme_critical_moments.1014.t
	desc = cki_scheme_critical_moments.1014
	theme = generic_intrigue_scheme

	left_portrait = {
		character = scope:owner
		animation = dismissal
	}
	lower_right_portrait = scope:target

	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}

	trigger = {
		NOT = {
			has_character_flag = had_cki_scheme_critical_moments_1014
		}
	}

	immediate = {
		add_character_flag = {
			flag = had_cki_scheme_critical_moments_1014
			years = 5
		}
	}

	option = {
		name = cki_scheme_critical_moments.1014.a

		tarnish_rep_failure_effect = yes
		scope:scheme = {
			end_scheme = yes
		 }
		scope:target = {
			trigger_event = cki_scheme_critical_moments.1017 
		}
	}
}

# Successful Notification to scheme target
cki_scheme_critical_moments.1015 = {
	type = character_event
	window = scheme_target_event
	title = cki_scheme_critical_moments.1015.t
	desc = cki_scheme_critical_moments.1015.desc
	theme = generic_intrigue_scheme

	option = {
		name = cki_scheme_critical_moments.1015.a
	}
}

# Successful Not Secret Notification to scheme target
cki_scheme_critical_moments.1016 = {
	type = character_event
	window = scheme_target_event
	title = cki_scheme_critical_moments.1016.t
	desc = cki_scheme_critical_moments.1016.desc
	theme = generic_intrigue_scheme
	left_portrait = scope:owner

	option = {
		name = cki_scheme_critical_moments.1016.a
	}
}

# Failed Not Secret Notification to scheme target
cki_scheme_critical_moments.1017 = {
	type = character_event
	window = scheme_target_event
	title = cki_scheme_critical_moments.1017.t
	desc = cki_scheme_critical_moments.1017.desc
	theme = generic_intrigue_scheme
	left_portrait = scope:owner

	option = {
		name = cki_scheme_critical_moments.1017.a
	}
}


#######################################################
### Results event for the Instigate Revolt scheme.
#######################################################
# Determine outcome
cki_scheme_critical_moments.1020 = {
	hidden = yes

	immediate = {
		scope:scheme = {
			random = {
				chance = scope:scheme.scheme_secrecy
				save_scope_value_as = {
					name = scheme_secret
					value = yes
				}
			}
			random = {
				chance = scope:scheme.scheme_success_chance

				save_scope_value_as = {
					name = scheme_successful
					value = yes
				}
			}
			scope:owner = {			
				if = {
					limit = {
						exists = scope:scheme_successful
					}
					if = {
						limit = {
							exists = scope:scheme_secret
						}
							trigger_event = {
								id = cki_scheme_critical_moments.1021
							}
						}
						else = {
							trigger_event = {
								id = cki_scheme_critical_moments.1022
							}
						}
					}
				else = {
					if = {
						limit = {
							exists = scope:scheme_secret
						}
							trigger_event = {
								id = cki_scheme_critical_moments.1023
							}
						}
						else = {
							trigger_event = {
								id = cki_scheme_critical_moments.1024
							}
						}	
				}
			}
		}
	}
}
# Total Success
cki_scheme_critical_moments.1021 = {
	type = character_event
	window = scheme_successful_event
	title = cki_scheme_critical_moments.1021.t
	desc = cki_scheme_critical_moments.1021.desc
	theme = generic_intrigue_scheme
	left_portrait = {
		character = scope:owner
		animation = happiness
	}
	lower_right_portrait = scope:target

	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}
	
	immediate = {
		root = { 
			send_interface_message = {
				type = event_intrigue_good
				title = revolt_success_message
				left_icon = root
				right_icon = scope:target
			}
		}
	}

	option = {
		name = cki_scheme_critical_moments.1011.a
		revolt_success_effect = yes

		scope:scheme = {
			end_scheme = yes
		}

		scope:target = {
			trigger_event = cki_scheme_critical_moments.1025 
		}
	}
}

# Partial Success
cki_scheme_critical_moments.1022 = {
	type = character_event
	window = scheme_successful_event
	title = cki_scheme_critical_moments.1022.t
	desc = cki_scheme_critical_moments.1022.desc
	theme = generic_intrigue_scheme
	left_portrait = {
		character = scope:owner
		animation = happiness
	}
	lower_right_portrait = scope:target

	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}
	
	immediate = {
		root = { 
			send_interface_message = {
				type = event_intrigue_good
				title = revolt_success_message
				left_icon = root
				right_icon = scope:target
			}
		}
	}

	option = {
		name = cki_scheme_critical_moments.1022.a
		revolt_partial_success_effect = yes

		scope:scheme = {
			end_scheme = yes
		}

		scope:target = {
			trigger_event = cki_scheme_critical_moments.1026 
		}
	}
}

# Partial Failure
cki_scheme_critical_moments.1023 = {
	type = character_event
	window = scheme_failed_event
	title = cki_scheme_critical_moments.1023.t
	desc = cki_scheme_critical_moments.1023
	theme = generic_intrigue_scheme

	left_portrait = {
		character = scope:owner
		animation = dismissal
	}
	lower_right_portrait = scope:target

	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}

	trigger = {
		NOT = {
			has_character_flag = had_cki_scheme_critical_moments_1023
		}
	}

	immediate = {
		add_character_flag = {
			flag = had_cki_scheme_critical_moments_1023
			years = 5
		}
	}

	option = {
		name = cki_scheme_critical_moments.1023.a

		revolt_partial_failure_effect = yes
		scope:scheme = {
			end_scheme = yes
		 }
	}
}

# Total Failure
cki_scheme_critical_moments.1024 = {
	type = character_event
	window = scheme_failed_event
	title = cki_scheme_critical_moments.1024.t
	desc = cki_scheme_critical_moments.1024.desc
	theme = generic_intrigue_scheme

	left_portrait = {
		character = scope:owner
		animation = dismissal
	}
	lower_right_portrait = scope:target

	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}

	trigger = {
		NOT = {
			has_character_flag = had_cki_scheme_critical_moments_1024
		}
	}

	immediate = {
		add_character_flag = {
			flag = had_cki_scheme_critical_moments_1024
			years = 5
		}
	}

	option = {
		name = cki_scheme_critical_moments.1024.a

		revolt_failure_effect = yes
		scope:scheme = {
			end_scheme = yes
		 }
		scope:target = {
			trigger_event = cki_scheme_critical_moments.1027 
		}
	}
}

# Successful Notification to scheme target
cki_scheme_critical_moments.1025 = {
	type = character_event
	window = scheme_target_event
	title = cki_scheme_critical_moments.1025.t
	desc = cki_scheme_critical_moments.1025.desc
	theme = generic_intrigue_scheme

	option = {
		name = cki_scheme_critical_moments.1025.a
	}
}

# Successful Not Secret Notification to scheme target
cki_scheme_critical_moments.1026 = {
	type = character_event
	window = scheme_target_event
	title = cki_scheme_critical_moments.1026.t
	desc = cki_scheme_critical_moments.1026.desc
	theme = generic_intrigue_scheme
	left_portrait = scope:owner

	option = {
		name = cki_scheme_critical_moments.1026.a
	}
}

# Failed Not Secret Notification to scheme target
cki_scheme_critical_moments.1027 = {
	type = character_event
	window = scheme_target_event
	title = cki_scheme_critical_moments.1027.t
	desc = cki_scheme_critical_moments.1027.desc
	theme = generic_intrigue_scheme
	left_portrait = scope:owner

	option = {
		name = cki_scheme_critical_moments.1027.a
	}
}

#######################################################
### Results event for the Intimidate scheme.
#######################################################
# Determine outcome
cki_scheme_critical_moments.1030 = {
	hidden = yes

	immediate = {
		scope:scheme = {
			random = {
				chance = scope:scheme.scheme_success_chance

				save_scope_value_as = {
					name = scheme_successful
					value = yes
				}
			}
			scope:owner = {			
				if = {
					limit = {
						exists = scope:scheme_successful
					}
					trigger_event = {
								id = cki_scheme_critical_moments.1031
					}
				}
				else = {
					trigger_event = {
								id = cki_scheme_critical_moments.1034
					}	
				}
			}
		}
	}
}
# Total Success
cki_scheme_critical_moments.1031 = {
	type = character_event
	window = scheme_successful_event
	title = cki_scheme_critical_moments.1031.t
	desc = cki_scheme_critical_moments.1031.desc
	theme = generic_intrigue_scheme
	left_portrait = {
		character = scope:owner
		animation = happiness
	}
	lower_right_portrait = scope:target

	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}
	
	immediate = {
		root = { 
			send_interface_message = {
				type = event_intrigue_good
				title = intimidate_success_message
				left_icon = root
				right_icon = scope:target
			}
		}
	}

	option = {
		name = cki_scheme_critical_moments.1031.a
		intimidate_success_effect = yes

		scope:scheme = {
			end_scheme = yes
		}

		scope:target = {
			trigger_event = cki_scheme_critical_moments.1035 
		}
	}
}

# Total Failure
cki_scheme_critical_moments.1034 = {
	type = character_event
	window = scheme_failed_event
	title = cki_scheme_critical_moments.1034.t
	desc = cki_scheme_critical_moments.1034.desc
	theme = generic_intrigue_scheme

	left_portrait = {
		character = scope:owner
		animation = dismissal
	}
	lower_right_portrait = scope:target

	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}

	option = {
		name = cki_scheme_critical_moments.1034.a

		intimidate_failure_effect = yes
		scope:scheme = {
			end_scheme = yes
		 }
		scope:target = {
			trigger_event = cki_scheme_critical_moments.1037 
		} 
	}
}

# Successful Notification to scheme target
cki_scheme_critical_moments.1035 = {
	type = character_event
	window = scheme_target_event
	title = cki_scheme_critical_moments.1035.t
	desc = cki_scheme_critical_moments.1035.desc
	theme = generic_intrigue_scheme

	option = {
		name = cki_scheme_critical_moments.1035.a
	}
}

# Failed Not Secret Notification to scheme target
cki_scheme_critical_moments.1037 = {
	type = character_event
	window = scheme_target_event
	title = cki_scheme_critical_moments.1037.t
	desc = cki_scheme_critical_moments.1037.desc
	theme = generic_intrigue_scheme
	left_portrait = scope:owner

	option = {
		name = cki_scheme_critical_moments.1037.a
	}
}

#######################################################
### Results event for the Convert scheme.
#######################################################
# Determine outcome
cki_scheme_critical_moments.1040 = {
	hidden = yes
	immediate = {
		scope:scheme = {
			random = {
				chance = scope:scheme.scheme_success_chance

				save_scope_value_as = {
					name = scheme_successful
					value = yes
				}
			}
			scope:owner = {			
				if = {
					limit = {
						exists = scope:scheme_successful
					}
					trigger_event = {
								id = cki_scheme_critical_moments.1041
					}
				}
				else = {
					trigger_event = {
								id = cki_scheme_critical_moments.1044
					}	
				}
			}
		}
	}
}
# Success
cki_scheme_critical_moments.1041 = {
	type = character_event
	window = scheme_successful_event
	title = cki_scheme_critical_moments.1041.t
	desc = cki_scheme_critical_moments.1041.desc
	theme = generic_intrigue_scheme
	left_portrait = {
		character = scope:owner
		animation = happiness
	}
	lower_right_portrait = scope:target

	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}
	
	immediate = {
		root = { 
			send_interface_message = {
				type = event_intrigue_good
				title = convert_success_message
				left_icon = root
				right_icon = scope:target
			}
		}
	}

	option = {
		name = cki_scheme_critical_moments.1041.a
		convert_success_effect = yes

		scope:scheme = {
			end_scheme = yes
		}

		scope:target = {
			trigger_event = cki_scheme_critical_moments.1045 
		}
	}
}
# Failure
cki_scheme_critical_moments.1044 = {
	type = character_event
	window = scheme_failed_event
	title = cki_scheme_critical_moments.1044.t
	desc = cki_scheme_critical_moments.1044.desc
	theme = generic_intrigue_scheme

	left_portrait = {
		character = scope:owner
		animation = dismissal
	}
	lower_right_portrait = scope:target

	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}

	option = {
		name = cki_scheme_critical_moments.1044.a

		convert_failure_effect = yes
		scope:scheme = {
			end_scheme = yes
		 }
		scope:target = {
			trigger_event = cki_scheme_critical_moments.1047
		}
	}
}

# Successful Notification to scheme target
cki_scheme_critical_moments.1045 = {
	type = character_event
	window = scheme_target_event
	title = cki_scheme_critical_moments.1045.t
	desc = cki_scheme_critical_moments.1045.desc
	theme = generic_intrigue_scheme

	option = {
		name = cki_scheme_critical_moments.1045.a
	}
}

# Failed Not Secret Notification to scheme target
cki_scheme_critical_moments.1047 = {
	type = character_event
	window = scheme_target_event
	title = cki_scheme_critical_moments.1047.t
	desc = cki_scheme_critical_moments.1047.desc
	theme = generic_intrigue_scheme
	left_portrait = scope:owner

	option = {
		name = cki_scheme_critical_moments.1047.a
	}
}
#######################################################
### Results event for the Mentor scheme.
#######################################################
# Determine outcome
cki_scheme_critical_moments.1061 = {
	hidden = yes
	immediate = {
		scope:scheme = {
			random = {
				chance = scope:scheme.scheme_success_chance

				save_scope_value_as = {
					name = scheme_successful
					value = yes
				}
			}
			scope:owner = {			
				if = {
					limit = {
						exists = scope:scheme_successful
					}
					trigger_event = {
								id = cki_scheme_critical_moments.1051
					}
				}
				else = {
					trigger_event = {
								id = cki_scheme_critical_moments.1056
					}	
				}
			}
		}
	}
}
# Determine outcome
cki_scheme_critical_moments.1062 = {
	hidden = yes
	immediate = {
		scope:scheme = {
			random = {
				chance = scope:scheme.scheme_success_chance

				save_scope_value_as = {
					name = scheme_successful
					value = yes
				}
			}
			scope:owner = {			
				if = {
					limit = {
						exists = scope:scheme_successful
					}
					trigger_event = {
								id = cki_scheme_critical_moments.1052
					}
				}
				else = {
					trigger_event = {
								id = cki_scheme_critical_moments.1056
					}	
				}
			}
		}
	}
}
# Determine outcome
cki_scheme_critical_moments.1063 = {
	hidden = yes
	immediate = {
		scope:scheme = {
			random = {
				chance = scope:scheme.scheme_success_chance

				save_scope_value_as = {
					name = scheme_successful
					value = yes
				}
			}
			scope:owner = {			
				if = {
					limit = {
						exists = scope:scheme_successful
					}
					trigger_event = {
								id = cki_scheme_critical_moments.1053
					}
				}
				else = {
					trigger_event = {
								id = cki_scheme_critical_moments.1056
					}	
				}
			}
		}
	}
}
# Determine outcome
cki_scheme_critical_moments.1064 = {
	hidden = yes
	immediate = {
		scope:scheme = {
			random = {
				chance = scope:scheme.scheme_success_chance

				save_scope_value_as = {
					name = scheme_successful
					value = yes
				}
			}
			scope:owner = {			
				if = {
					limit = {
						exists = scope:scheme_successful
					}
					trigger_event = {
								id = cki_scheme_critical_moments.1054
					}
				}
				else = {
					trigger_event = {
								id = cki_scheme_critical_moments.1056
					}	
				}
			}
		}
	}
}
# Determine outcome
cki_scheme_critical_moments.1065 = {
	hidden = yes
	immediate = {
		scope:scheme = {
			random = {
				chance = scope:scheme.scheme_success_chance

				save_scope_value_as = {
					name = scheme_successful
					value = yes
				}
			}
			scope:owner = {			
				if = {
					limit = {
						exists = scope:scheme_successful
					}
					trigger_event = {
								id = cki_scheme_critical_moments.1055
					}
				}
				else = {
					trigger_event = {
								id = cki_scheme_critical_moments.1056
					}	
				}
			}
		}
	}
}

# Success - Diplomacy
cki_scheme_critical_moments.1051 = {
	type = character_event
	window = scheme_successful_event
	title = cki_scheme_critical_moments.1051.t
	desc = cki_scheme_critical_moments.1051.desc
	theme = generic_intrigue_scheme
	left_portrait = {
		character = scope:owner
		animation = happiness
	}
	lower_right_portrait = scope:target

	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}
	
	immediate = {
		root = { 
			send_interface_message = {
				type = event_intrigue_good
				title = mentor_success_message
				left_icon = root
				right_icon = scope:target
			}
		}
	}

	option = {
		name = cki_scheme_critical_moments.1051.a
		mentor_diplomacy_success_effect = yes

		scope:scheme = {
			end_scheme = yes
		}

		scope:target = {
			trigger_event = cki_scheme_critical_moments.1057 
		}
	}
}
# Success - Martial
cki_scheme_critical_moments.1052 = {
	type = character_event
	window = scheme_successful_event
	title = cki_scheme_critical_moments.1052.t
	desc = cki_scheme_critical_moments.1052.desc
	theme = generic_intrigue_scheme
	left_portrait = {
		character = scope:owner
		animation = happiness
	}
	lower_right_portrait = scope:target

	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}
	
	immediate = {
		root = { 
			send_interface_message = {
				type = event_intrigue_good
				title = mentor_success_message
				left_icon = root
				right_icon = scope:target
			}
		}
	}

	option = {
		name = cki_scheme_critical_moments.1052.a
		mentor_martial_success_effect = yes

		scope:scheme = {
			end_scheme = yes
		}

		scope:target = {
			trigger_event = cki_scheme_critical_moments.1057 
		}
	}
}
# Success - Stewardship
cki_scheme_critical_moments.1053 = {
	type = character_event
	window = scheme_successful_event
	title = cki_scheme_critical_moments.1053.t
	desc = cki_scheme_critical_moments.1053.desc
	theme = generic_intrigue_scheme
	left_portrait = {
		character = scope:owner
		animation = happiness
	}
	lower_right_portrait = scope:target

	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}
	
	immediate = {
		root = { 
			send_interface_message = {
				type = event_intrigue_good
				title = mentor_success_message
				left_icon = root
				right_icon = scope:target
			}
		}
	}

	option = {
		name = cki_scheme_critical_moments.1053.a
		mentor_stewardship_success_effect = yes

		scope:scheme = {
			end_scheme = yes
		}

		scope:target = {
			trigger_event = cki_scheme_critical_moments.1057 
		}
	}
}
# Success - Intrigue
cki_scheme_critical_moments.1054 = {
	type = character_event
	window = scheme_successful_event
	title = cki_scheme_critical_moments.1054.t
	desc = cki_scheme_critical_moments.1054.desc
	theme = generic_intrigue_scheme
	left_portrait = {
		character = scope:owner
		animation = happiness
	}
	lower_right_portrait = scope:target

	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}
	
	immediate = {
		root = { 
			send_interface_message = {
				type = event_intrigue_good
				title = mentor_success_message
				left_icon = root
				right_icon = scope:target
			}
		}
	}

	option = {
		name = cki_scheme_critical_moments.1054.a
		mentor_intrigue_success_effect = yes

		scope:scheme = {
			end_scheme = yes
		}

		scope:target = {
			trigger_event = cki_scheme_critical_moments.1057 
		}
	}
}
# Success - Learning
cki_scheme_critical_moments.1055 = {
	type = character_event
	window = scheme_successful_event
	title = cki_scheme_critical_moments.1055.t
	desc = cki_scheme_critical_moments.1055.desc
	theme = generic_intrigue_scheme
	left_portrait = {
		character = scope:owner
		animation = happiness
	}
	lower_right_portrait = scope:target

	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}
	
	immediate = {
		root = { 
			send_interface_message = {
				type = event_intrigue_good
				title = mentor_success_message
				left_icon = root
				right_icon = scope:target
			}
		}
	}

	option = {
		name = cki_scheme_critical_moments.1055.a
		mentor_learning_success_effect = yes

		scope:scheme = {
			end_scheme = yes
		}

		scope:target = {
			trigger_event = cki_scheme_critical_moments.1057 
		}
	}
}
# Failure
cki_scheme_critical_moments.1056 = {
	type = character_event
	window = scheme_failed_event
	title = cki_scheme_critical_moments.1054.t
	desc = cki_scheme_critical_moments.1054.desc
	theme = generic_intrigue_scheme

	left_portrait = {
		character = scope:owner
		animation = dismissal
	}
	lower_right_portrait = scope:target

	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}

	option = {
		name = cki_scheme_critical_moments.1054.a

		mentor_failure_effect = yes
		scope:scheme = {
			end_scheme = yes
		 }
		scope:target = {
			trigger_event = cki_scheme_critical_moments.1058 
		}
	}
}


# Successful Notification to scheme target
cki_scheme_critical_moments.1057 = {
	type = character_event
	window = scheme_target_event
	title = cki_scheme_critical_moments.1057.t
	desc = cki_scheme_critical_moments.1057.desc
	theme = generic_intrigue_scheme

	option = {
		name = cki_scheme_critical_moments.1057.a
	}
}

# Failed Notification to scheme target
cki_scheme_critical_moments.1058 = {
	type = character_event
	window = scheme_target_event
	title = cki_scheme_critical_moments.1058.t
	desc = cki_scheme_critical_moments.1058.desc
	theme = generic_intrigue_scheme
	left_portrait = scope:owner

	option = {
		name = cki_scheme_critical_moments.1058.a
	}
}

#######################################################
### Results event for the Antagonize Council scheme.
#######################################################
# Determine outcome
cki_scheme_critical_moments.1070 = {
	hidden = yes

	immediate = {
		scope:scheme = {
			random = {
				chance = scope:scheme.scheme_secrecy
				save_scope_value_as = {
					name = scheme_secret
					value = yes
				}
			}
			random = {
				chance = scope:scheme.scheme_success_chance

				save_scope_value_as = {
					name = scheme_successful
					value = yes
				}
			}
			scope:owner = {			
				if = {
					limit = {
						exists = scope:scheme_successful
					}
					if = {
						limit = {
							exists = scope:scheme_secret
						}
							trigger_event = {
								id = cki_scheme_critical_moments.1071
							}
						}
						else = {
							trigger_event = {
								id = cki_scheme_critical_moments.1072
							}
						}
					}
				else = {
					if = {
						limit = {
							exists = scope:scheme_secret
						}
							trigger_event = {
								id = cki_scheme_critical_moments.1073
							}
						}
						else = {
							trigger_event = {
								id = cki_scheme_critical_moments.1074
							}
						}	
				}
			}
		}
	}
}
# Total Success
cki_scheme_critical_moments.1071 = {
	type = character_event
	window = scheme_successful_event
	title = cki_scheme_critical_moments.1071.t
	desc = cki_scheme_critical_moments.1071.desc
	theme = generic_intrigue_scheme
	left_portrait = {
		character = scope:owner
		animation = happiness
	}
	lower_right_portrait = scope:target

	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}
	
	immediate = {
		root = { 
			send_interface_message = {
				type = event_intrigue_good
				title = antagonize_council_success_message
				left_icon = root
				right_icon = scope:target
			}
		}
	}

	option = {
		name = cki_scheme_critical_moments.1071.a
		antagonize_council_success_effect = yes

		scope:scheme = {
			end_scheme = yes
		}

		scope:target = {
			trigger_event = cki_scheme_critical_moments.1075 
		}
	}
}

# Partial Success
cki_scheme_critical_moments.1072 = {
	type = character_event
	window = scheme_successful_event
	title = cki_scheme_critical_moments.1072.t
	desc = cki_scheme_critical_moments.1072.desc
	theme = generic_intrigue_scheme
	left_portrait = {
		character = scope:owner
		animation = happiness
	}
	lower_right_portrait = scope:target

	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}
	
	immediate = {
		root = { 
			send_interface_message = {
				type = event_intrigue_good
				title = antagonize_council_success_message
				left_icon = root
				right_icon = scope:target
			}
		}
	}

	option = {
		name = cki_scheme_critical_moments.1072.a
		antagonize_council_partial_success_effect = yes

		scope:scheme = {
			end_scheme = yes
		}

		scope:target = {
			trigger_event = cki_scheme_critical_moments.1076 
		}
	}
}

# Partial Failure
cki_scheme_critical_moments.1073 = {
	type = character_event
	window = scheme_failed_event
	title = cki_scheme_critical_moments.1073.t
	desc = cki_scheme_critical_moments.1073
	theme = generic_intrigue_scheme

	left_portrait = {
		character = scope:owner
		animation = dismissal
	}
	lower_right_portrait = scope:target

	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}

	trigger = {
		NOT = {
			has_character_flag = had_cki_scheme_critical_moments_1073
		}
	}

	immediate = {
		add_character_flag = {
			flag = had_cki_scheme_critical_moments_1073
			years = 5
		}
	}

	option = {
		name = cki_scheme_critical_moments.1073.a

		antagonize_council_partial_failure_effect = yes
		scope:scheme = {
			end_scheme = yes
		 }
	}
}

# Total Failure
cki_scheme_critical_moments.1074 = {
	type = character_event
	window = scheme_failed_event
	title = cki_scheme_critical_moments.1074.t
	desc = cki_scheme_critical_moments.1074.desc
	theme = generic_intrigue_scheme

	left_portrait = {
		character = scope:owner
		animation = dismissal
	}
	lower_right_portrait = scope:target

	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}

	trigger = {
		NOT = {
			has_character_flag = had_cki_scheme_critical_moments_1074
		}
	}

	immediate = {
		add_character_flag = {
			flag = had_cki_scheme_critical_moments_1074
			years = 5
		}
	}

	option = {
		name = cki_scheme_critical_moments.1074.a

		antagonize_council_failure_effect = yes
		scope:scheme = {
			end_scheme = yes
		 }
		scope:target = {
			trigger_event = cki_scheme_critical_moments.1077 
		}
	}
}

# Successful Notification to scheme target
cki_scheme_critical_moments.1075 = {
	type = character_event
	window = scheme_target_event
	title = cki_scheme_critical_moments.1005.t
	desc = cki_scheme_critical_moments.1005.desc
	theme = generic_intrigue_scheme

	option = {
		name = cki_scheme_critical_moments.1005.a
	}
}

# Successful Not Secret Notification to scheme target
cki_scheme_critical_moments.1076 = {
	type = character_event
	window = scheme_target_event
	title = cki_scheme_critical_moments.1076.t
	desc = cki_scheme_critical_moments.1076.desc
	theme = generic_intrigue_scheme
	left_portrait = scope:owner

	option = {
		name = cki_scheme_critical_moments.1076.a
	}
}

# Failed Not Secret Notification to scheme target
cki_scheme_critical_moments.1077 = {
	type = character_event
	window = scheme_target_event
	title = cki_scheme_critical_moments.1077.t
	desc = cki_scheme_critical_moments.1077.desc
	theme = generic_intrigue_scheme
	left_portrait = scope:owner

	option = {
		name = cki_scheme_critical_moments.1077.a
	}
}
#######################################################
### Results event for the Antagonize Spouse scheme.
#######################################################
# Determine outcome
cki_scheme_critical_moments.1080 = {
	hidden = yes

	immediate = {
		scope:scheme = {
			random = {
				chance = scope:scheme.scheme_secrecy
				save_scope_value_as = {
					name = scheme_secret
					value = yes
				}
			}
			random = {
				chance = scope:scheme.scheme_success_chance

				save_scope_value_as = {
					name = scheme_successful
					value = yes
				}
			}
			scope:owner = {			
				if = {
					limit = {
						exists = scope:scheme_successful
					}
					if = {
						limit = {
							exists = scope:scheme_secret
						}
							trigger_event = {
								id = cki_scheme_critical_moments.1081
							}
						}
						else = {
							trigger_event = {
								id = cki_scheme_critical_moments.1082
							}
						}
					}
				else = {
					if = {
						limit = {
							exists = scope:scheme_secret
						}
							trigger_event = {
								id = cki_scheme_critical_moments.1083
							}
						}
						else = {
							trigger_event = {
								id = cki_scheme_critical_moments.1084
							}
						}	
				}
			}
		}
	}
}
# Total Success
cki_scheme_critical_moments.1081 = {
	type = character_event
	window = scheme_successful_event
	title = cki_scheme_critical_moments.1081.t
	desc = cki_scheme_critical_moments.1081.desc
	theme = generic_intrigue_scheme
	left_portrait = {
		character = scope:owner
		animation = happiness
	}
	lower_right_portrait = scope:target

	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}
	
	immediate = {
		root = { 
			send_interface_message = {
				type = event_intrigue_good
				title = antagonize_spouse_success_message
				left_icon = root
				right_icon = scope:target
			}
		}
	}

	option = {
		name = cki_scheme_critical_moments.1081.a
		antagonize_spouse_success_effect = yes

		scope:scheme = {
			end_scheme = yes
		}

		scope:target = {
			trigger_event = cki_scheme_critical_moments.1085 
		}
	}
}

# Partial Success
cki_scheme_critical_moments.1082 = {
	type = character_event
	window = scheme_successful_event
	title = cki_scheme_critical_moments.1082.t
	desc = cki_scheme_critical_moments.1082.desc
	theme = generic_intrigue_scheme
	left_portrait = {
		character = scope:owner
		animation = happiness
	}
	lower_right_portrait = scope:target

	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}
	
	immediate = {
		root = { 
			send_interface_message = {
				type = event_intrigue_good
				title = antagonize_spouse_success_message
				left_icon = root
				right_icon = scope:target
			}
		}
	}

	option = {
		name = cki_scheme_critical_moments.1082.a
		antagonize_spouse_partial_success_effect = yes

		scope:scheme = {
			end_scheme = yes
		}

		scope:target = {
			trigger_event = cki_scheme_critical_moments.1086 
		}
	}
}

# Partial Failure
cki_scheme_critical_moments.1083 = {
	type = character_event
	window = scheme_failed_event
	title = cki_scheme_critical_moments.1083.t
	desc = cki_scheme_critical_moments.1083
	theme = generic_intrigue_scheme

	left_portrait = {
		character = scope:owner
		animation = dismissal
	}
	lower_right_portrait = scope:target

	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}

	trigger = {
		NOT = {
			has_character_flag = had_cki_scheme_critical_moments_1083
		}
	}

	immediate = {
		add_character_flag = {
			flag = had_cki_scheme_critical_moments_1083
			years = 5
		}
	}

	option = {
		name = cki_scheme_critical_moments.1083.a

		antagonize_spouse_partial_failure_effect = yes
		scope:scheme = {
			end_scheme = yes
		 }
	}
}

# Total Failure
cki_scheme_critical_moments.1084 = {
	type = character_event
	window = scheme_failed_event
	title = cki_scheme_critical_moments.1084.t
	desc = cki_scheme_critical_moments.1084.desc
	theme = generic_intrigue_scheme

	left_portrait = {
		character = scope:owner
		animation = dismissal
	}
	lower_right_portrait = scope:target

	widget = {
		gui = "event_window_widget_scheme"
		container = "custom_widgets_container"
	}

	trigger = {
		NOT = {
			has_character_flag = had_cki_scheme_critical_moments_1084
		}
	}

	immediate = {
		add_character_flag = {
			flag = had_cki_scheme_critical_moments_1084
			years = 5
		}
	}

	option = {
		name = cki_scheme_critical_moments.1084.a

		antagonize_spouse_failure_effect = yes
		scope:scheme = {
			end_scheme = yes
		 }
		scope:target = {
			trigger_event = cki_scheme_critical_moments.1087 
		}
	}
}
# Successful Notification to scheme target
cki_scheme_critical_moments.1085 = {
	type = character_event
	window = scheme_target_event
	title = cki_scheme_critical_moments.1085.t
	desc = cki_scheme_critical_moments.1085.desc
	theme = generic_intrigue_scheme

	option = {
		name = cki_scheme_critical_moments.1085.a
	}
}

# Successful Not Secret Notification to scheme target
cki_scheme_critical_moments.1086 = {
	type = character_event
	window = scheme_target_event
	title = cki_scheme_critical_moments.1086.t
	desc = cki_scheme_critical_moments.1086.desc
	theme = generic_intrigue_scheme
	left_portrait = scope:owner

	option = {
		name = cki_scheme_critical_moments.1086.a
	}
}

# Failed Not Secret Notification to scheme target
cki_scheme_critical_moments.1087 = {
	type = character_event
	window = scheme_target_event
	title = cki_scheme_critical_moments.1087.t
	desc = cki_scheme_critical_moments.1087.desc
	theme = generic_intrigue_scheme
	left_portrait = scope:owner

	option = {
		name = cki_scheme_critical_moments.1087.a
	}
}

#######################################################
### Results event for the Raid Supply Scheme
#######################################################
# Determine outcome
cki_scheme_critical_moments.1090 = {
    hidden = yes
    immediate = {
        scope:scheme = {
            random = {
                chance = scope:scheme.scheme_secrecy
                save_scope_value_as = {
                    name = scheme_secret
                    value = yes
                }
            }
            random = {
                chance = scope:scheme.scheme_success_chance

                save_scope_value_as = {
                    name = scheme_successful
                    value = yes
                }
            }
            scope:owner = {         
                if = {
                    limit = {
                        exists = scope:scheme_successful
                    }
                    if = {
                        limit = {
                            exists = scope:scheme_secret
                        }
                            trigger_event = {
                                id = cki_scheme_critical_moments.1091
                            }
                        }
                        else = {
                            trigger_event = {
                                id = cki_scheme_critical_moments.1092
                            }
                        }
                    }
                else = {
                    if = {
                        limit = {
                            exists = scope:scheme_secret
                        }
                            trigger_event = {
                                id = cki_scheme_critical_moments.1093
                            }
                        }
                        else = {
                            trigger_event = {
                                id = cki_scheme_critical_moments.1094
                            }
                        }   
                }
            }
        }
    }
}
# Total Success
cki_scheme_critical_moments.1091 = {
    type = character_event
    window = scheme_successful_event
    title = cki_scheme_critical_moments.1091.t
    desc = cki_scheme_critical_moments.1091.desc
    theme = generic_intrigue_scheme
    left_portrait = {
        character = scope:owner
        animation = happiness
    }
    lower_right_portrait = scope:target

    widget = {
        gui = "event_window_widget_scheme"
        container = "custom_widgets_container"
    }
    
    immediate = {
        root = { 
            send_interface_message = {
                type = event_intrigue_good
                title = enemy_army_speed_scheme_success_message
                left_icon = root
                right_icon = scope:target
            }
        }
    }

    option = {
        name = cki_scheme_critical_moments.1091.a
        enemy_army_speed_success_effect = yes

        scope:scheme = {
            end_scheme = yes
        }
    }
}

# Partial Success
cki_scheme_critical_moments.1092 = {
    type = character_event
    window = scheme_successful_event
    title = cki_scheme_critical_moments.1092.t
    desc = cki_scheme_critical_moments.1092.desc
    theme = generic_intrigue_scheme
    left_portrait = {
        character = scope:owner
        animation = happiness
    }
    lower_right_portrait = scope:target

    widget = {
        gui = "event_window_widget_scheme"
        container = "custom_widgets_container"
    }
    
    immediate = {
        root = { 
            send_interface_message = {
                type = event_intrigue_good
                title = enemy_army_speed_scheme_success_message
                left_icon = root
                right_icon = scope:target
            }
        }
    }

    option = {
        name = cki_scheme_critical_moments.1092.a
        enemy_army_speed_partial_success_effect = yes

        scope:scheme = {
            end_scheme = yes
        }

        scope:target = {
            trigger_event = cki_scheme_critical_moments.1096 
        }
    }
}

# Partial Failure
cki_scheme_critical_moments.1093 = {
    type = character_event
    window = scheme_failed_event
    title = cki_scheme_critical_moments.1093.t
    desc = cki_scheme_critical_moments.1093
    theme = generic_intrigue_scheme

    left_portrait = {
        character = scope:owner
        animation = dismissal
    }
    lower_right_portrait = scope:target

    widget = {
        gui = "event_window_widget_scheme"
        container = "custom_widgets_container"
    }

    trigger = {
        NOT = {
            has_character_flag = had_cki_scheme_critical_moments_1083
        }
    }

    immediate = {
        add_character_flag = {
            flag = had_cki_scheme_critical_moments_1083
            years = 5
        }
    }

    option = {
        name = cki_scheme_critical_moments.1093.a

        enemy_army_speed_partial_failure_effect = yes
        scope:scheme = {
            end_scheme = yes
         }
    }
}

# Total Failure
cki_scheme_critical_moments.1094 = {
    type = character_event
    window = scheme_failed_event
    title = cki_scheme_critical_moments.1094.t
    desc = cki_scheme_critical_moments.1094.desc
    theme = generic_intrigue_scheme

    left_portrait = {
        character = scope:owner
        animation = dismissal
    }
    lower_right_portrait = scope:target

    widget = {
        gui = "event_window_widget_scheme"
        container = "custom_widgets_container"
    }

    trigger = {
        NOT = {
            has_character_flag = had_cki_scheme_critical_moments_1084
        }
    }

    immediate = {
        add_character_flag = {
            flag = had_cki_scheme_critical_moments_1084
            years = 5
        }
    }

    option = {
        name = cki_scheme_critical_moments.1094.a

        enemy_army_speed_failure_effect = yes
        scope:scheme = {
            end_scheme = yes
         }
        scope:target = {
            trigger_event = cki_scheme_critical_moments.1097 
        }
    }
}

# Successful Not Secret Notification to scheme target
cki_scheme_critical_moments.1096 = {
    type = character_event
    window = scheme_target_event
    title = cki_scheme_critical_moments.1096.t
    desc = cki_scheme_critical_moments.1096.desc
    theme = generic_intrigue_scheme
    left_portrait = scope:owner

    option = {
        name = cki_scheme_critical_moments.1096.a
    }
}

# Failed Not Secret Notification to scheme target
cki_scheme_critical_moments.1097 = {
    type = character_event
    window = scheme_target_event
    title = cki_scheme_critical_moments.1097.t
    desc = cki_scheme_critical_moments.1097.desc
    theme = generic_intrigue_scheme
    left_portrait = scope:owner

    option = {
        name = cki_scheme_critical_moments.1097.a
    }
}



#######################################################
### Results event for the enemy_army_speed Scheme
#######################################################
# Determine outcome
cki_scheme_critical_moments.1110 = {
    hidden = yes
    immediate = {
        scope:scheme = {
            random = {
                chance = scope:scheme.scheme_secrecy
                save_scope_value_as = {
                    name = scheme_secret
                    value = yes
                }
            }
            random = {
                chance = scope:scheme.scheme_success_chance

                save_scope_value_as = {
                    name = scheme_successful
                    value = yes
                }
            }
            scope:owner = {         
                if = {
                    limit = {
                        exists = scope:scheme_successful
                    }
                    if = {
                        limit = {
                            exists = scope:scheme_secret
                        }
                            trigger_event = {
                                id = cki_scheme_critical_moments.1111
                            }
                        }
                        else = {
                            trigger_event = {
                                id = cki_scheme_critical_moments.1112
                            }
                        }
                    }
                else = {
                    if = {
                        limit = {
                            exists = scope:scheme_secret
                        }
                            trigger_event = {
                                id = cki_scheme_critical_moments.1113
                            }
                        }
                        else = {
                            trigger_event = {
                                id = cki_scheme_critical_moments.1114
                            }
                        }   
                }
            }
        }
    }
}
# Total Success
cki_scheme_critical_moments.1111 = {
    type = character_event
    window = scheme_successful_event
    title = cki_scheme_critical_moments.1111.t
    desc = cki_scheme_critical_moments.1111.desc
    theme = generic_intrigue_scheme
    left_portrait = {
        character = scope:owner
        animation = happiness
    }
    lower_right_portrait = scope:target

    widget = {
        gui = "event_window_widget_scheme"
        container = "custom_widgets_container"
    }
    
    immediate = {
        root = { 
            send_interface_message = {
                type = event_intrigue_good
                title = raid_supply_scheme_success_message
                left_icon = root
                right_icon = scope:target
            }
        }
    }

    option = {
        name = cki_scheme_critical_moments.1111.a
        raid_supply_success_effect = yes

        scope:scheme = {
            end_scheme = yes
        }
    }
}

# Partial Success
cki_scheme_critical_moments.1112 = {
    type = character_event
    window = scheme_successful_event
    title = cki_scheme_critical_moments.1112.t
    desc = cki_scheme_critical_moments.1112.desc
    theme = generic_intrigue_scheme
    left_portrait = {
        character = scope:owner
        animation = happiness
    }
    lower_right_portrait = scope:target

    widget = {
        gui = "event_window_widget_scheme"
        container = "custom_widgets_container"
    }
    
    immediate = {
        root = { 
            send_interface_message = {
                type = event_intrigue_good
                title = raid_supply_scheme_success_message
                left_icon = root
                right_icon = scope:target
            }
        }
    }

    option = {
        name = cki_scheme_critical_moments.1112.a
        raid_supply_partial_success_effect = yes

        scope:scheme = {
            end_scheme = yes
        }

        scope:target = {
            trigger_event = cki_scheme_critical_moments.1116 
        }
    }
}

# Partial Failure
cki_scheme_critical_moments.1113 = {
    type = character_event
    window = scheme_failed_event
    title = cki_scheme_critical_moments.1113.t
    desc = cki_scheme_critical_moments.1113
    theme = generic_intrigue_scheme

    left_portrait = {
        character = scope:owner
        animation = dismissal
    }
    lower_right_portrait = scope:target

    widget = {
        gui = "event_window_widget_scheme"
        container = "custom_widgets_container"
    }

    trigger = {
        NOT = {
            has_character_flag = had_cki_scheme_critical_moments_1083
        }
    }

    immediate = {
        add_character_flag = {
            flag = had_cki_scheme_critical_moments_1083
            years = 5
        }
    }

    option = {
        name = cki_scheme_critical_moments.1113.a

        raid_supply_partial_failure_effect = yes
        scope:scheme = {
            end_scheme = yes
         }
    }
}

# Total Failure
cki_scheme_critical_moments.1114 = {
    type = character_event
    window = scheme_failed_event
    title = cki_scheme_critical_moments.1114.t
    desc = cki_scheme_critical_moments.1114.desc
    theme = generic_intrigue_scheme

    left_portrait = {
        character = scope:owner
        animation = dismissal
    }
    lower_right_portrait = scope:target

    widget = {
        gui = "event_window_widget_scheme"
        container = "custom_widgets_container"
    }

    trigger = {
        NOT = {
            has_character_flag = had_cki_scheme_critical_moments_1084
        }
    }

    immediate = {
        add_character_flag = {
            flag = had_cki_scheme_critical_moments_1084
            years = 5
        }
    }

    option = {
        name = cki_scheme_critical_moments.1114.a

        raid_supply_failure_effect = yes
        scope:scheme = {
            end_scheme = yes
         }
        scope:target = {
            trigger_event = cki_scheme_critical_moments.1117 
        }
    }
}

# Successful Not Secret Notification to scheme target
cki_scheme_critical_moments.1116 = {
    type = character_event
    window = scheme_target_event
    title = cki_scheme_critical_moments.1116.t
    desc = cki_scheme_critical_moments.1116.desc
    theme = generic_intrigue_scheme
    left_portrait = scope:owner

    option = {
        name = cki_scheme_critical_moments.1116.a
    }
}

# Failed Not Secret Notification to scheme target
cki_scheme_critical_moments.1117 = {
    type = character_event
    window = scheme_target_event
    title = cki_scheme_critical_moments.1117.t
    desc = cki_scheme_critical_moments.1117.desc
    theme = generic_intrigue_scheme
    left_portrait = scope:owner

    option = {
        name = cki_scheme_critical_moments.1117.a
    }
}







## Secret Exposed Event
# Revolt Secret
cki_scheme_critical_moments.2001 = {
	type = character_event
	window = scheme_target_event
	title = cki_scheme_critical_moments.2001.t
	desc = cki_scheme_critical_moments.2001.desc
	theme = generic_intrigue_scheme
	left_portrait = scope:secret_owner
	right_portrait = scope:secret_exposer
	lower_right_portrait = scope:secret_target
	option = {
		name = cki_scheme_critical_moments.2001.a
		cki_revolt_secret_exposed_effect = yes
	}
}

# Antagonize Council Secret
cki_scheme_critical_moments.2002 = {
	type = character_event
	window = scheme_target_event
	title = cki_scheme_critical_moments.2002.t
	desc = cki_scheme_critical_moments.2002.desc
	theme = generic_intrigue_scheme
	left_portrait = scope:secret_owner
	right_portrait = scope:secret_exposer
	lower_right_portrait = scope:secret_target
	option = {
		name = cki_scheme_critical_moments.2002.a
		cki_antagonize_council_secret_exposed_effect = yes
	}
}
# Antagonize Spouse Secret
cki_scheme_critical_moments.2003 = {
	type = character_event
	window = scheme_target_event
	title = cki_scheme_critical_moments.2003.t
	desc = cki_scheme_critical_moments.2003.desc
	theme = generic_intrigue_scheme
	left_portrait = scope:secret_owner
	right_portrait = scope:secret_exposer
	lower_right_portrait = scope:secret_target
	option = {
		name = cki_scheme_critical_moments.2003.a
		cki_antagonize_spouse_secret_exposed_effect = yes
	}
}
# Tarnish Reputation Secret
cki_scheme_critical_moments.2004 = {
	type = character_event
	window = scheme_target_event
	title = cki_scheme_critical_moments.2004.t
	desc = cki_scheme_critical_moments.2004.desc
	theme = generic_intrigue_scheme
	left_portrait = scope:secret_owner
	right_portrait = scope:secret_exposer
	lower_right_portrait = scope:secret_target
	option = {
		name = cki_scheme_critical_moments.2004.a
		cki_tarnish_rep_secret_exposed_effect = yes
	}
}